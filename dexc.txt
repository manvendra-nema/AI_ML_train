TgfpE+0BltzniLbtC0U7Bgl4QazowZbiwg=
import base64
import os
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
def decrypt_key(encrypted_data, salt, iv, seed):
    """
    Decrypt the API key using AES decryption with a user-defined seed.
    """
    # Decode inputs
    encrypted_data = base64.b64decode(encrypted_data)
    salt = base64.b64decode(salt)
    iv = base64.b64decode(iv)

    # Regenerate the key
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(seed.encode())

    # Initialize AES cipher
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Decrypt the API key
    api_key = decryptor.update(encrypted_data) + decryptor.finalize()
    return api_key.decode()
